
import React, { useState, useEffect } from 'react';
import { Table, Button, Form, Modal } from 'react-bootstrap';
import '../App.css';
import { myAxios } from '../api/axios';





export default function StudentsManagement() {
  const [users, setUsers] = useState([]);
  const [editingUser, setEditingUser] = useState(null);
  const [editingField, setEditingField] = useState(""); 
  const [loading, setLoading] = useState(true);

  const [showModal, setShowModal] = useState(false);
  const [isSaving, setIsSaving] = useState(false);








  // adatbazisbol dolgozok lek√©r√©se axios-al, majd a useState-ban elrakt√°rozzuk,
  //  a [] azt jelenti hogy csak egyszer fut le, amikor az oldal bet√∂lt√∂dik
  useEffect(() => {
    myAxios.get("/api/dolgozok")
      .then(response => {
        setUsers(response.data);
        setLoading(false);
      })
      .catch(error => {
        console.error('Hiba az adatok bet√∂lt√©sekor:', error);
        setLoading(false);
      });
  }, []);












  // szerkeszt√©sn√©l, user egy objektum, field az objektum egyik tulajdons√°g neve pl tajsz√°m
  const handleEdit = (user, field) => {
    setEditingUser({ ...user });
    setEditingField(field);
  };




  // az input mez≈ë v√°ltoz√°sa
  const handleChange = (e) => {
    setEditingUser((prevUser) => ({
      ...prevUser,
      [editingField]: e.target.value, // A megfelel≈ë mez≈ët friss√≠tj√ºk
    }));
  };





  // Enter lenyom√°sakor ment√©s, escape megnyom√°sakor kil√©p√©s v√°ltozatlanul hagyva
  const handleKeyDown = (e) => {
    if (e.key === "Enter") {
      handleSave();
    } else if (e.key === "Escape") {
      setEditingUser(null);  // ha Escape-t nyomunk, √°ll√≠tsuk vissza az eredeti adatot
      setEditingField("");  // t√∂r√∂lj√ºk a szerkesztett mez≈ët
    }
  };





  const handleSave = () => {
    setIsSaving(true);
    setShowModal(true);

    myAxios.put(`/api/dolgozok/${editingUser.d_azon}`, editingUser)
      .then(() => {
        // megl√©v≈ë users t√∂mbben kicser√©lj√ºk az egyik felhaszn√°l√≥t (editingUser), mik√∂zben a t√∂bbi elemet v√°ltozatlanul hagyjuk
        // ha az aktu√°lis user d_azon √©rt√©ke megegyezik az editingUser.d_azon √©rt√©k√©vel, akkor az √∫j verzi√≥j√°t (editingUser) helyettes√≠ti be
        setUsers(users.map(user => user.d_azon === editingUser.d_azon ? editingUser : user));

        setEditingUser(null);
        setEditingField("");
          setIsSaving(false);
          setShowModal(false); 
      })
      .catch(error => {
        console.error('Hiba a ment√©sn√©l:', error);
          setIsSaving(false);
          setShowModal(false);
      });
  };






  return (
    <div className="studentsmanagement">
      <main>
        <article>
          <h1>Di√°k kezel√©s</h1>
          <div className="table-container">

            {/* Ha m√©g t√∂ltj√ºk az adatokat, akkor jelen√≠tse meg a "M√©g t√∂lt" √ºzenetet */}
            {loading ? (
              <h2>M√©g t√∂lt...</h2>
            ) : (



              <Table striped bordered hover responsive variant="dark">
              <thead>
                <tr>
                  <th>d_azon</th>
                  <th>N√©v</th>
                  <th>Email</th>
                  <th>Sz√ºlN√©v</th>
                  <th>Sz√ºlHely</th>
                  <th>Sz√ºlId≈ë</th>
                  <th>AnyjaNeve</th>
                  <th>Tajsz√°m</th>
                  <th>Ad√≥sz√°m</th>
                  <th>Gondvisel≈ëNeve</th>
                  <th>Telefonsz√°m</th>
                  <th>IskolaAzon</th>
                  <th>GyakhelyAzon</th>
                  <th>Megjegyz√©s</th>
                </tr>
              </thead>

              {/*Dinamikus t√°bl√°zat gener√°l√°sa*/}
              <tbody>
                {users.map((user) => (  // a users t√∂mb√∂n v√©gigmegy a map() f√ºggv√©ny, √©s minden user objektumhoz l√©trehoz egy <tr> (sor) elemet
                  <tr key={user.d_azon}>

                    {/*Az aktu√°lis user objektum √∂sszes kulcs√°n (nev, tajszam, stb.) v√©gigmegy, √©s minden kulcsb√≥l egy <td> (cell√°t) hoz l√©tre.
                      A cella dupla kattint√°sra (onDoubleClick) megh√≠vja a handleEdit(user, field) f√ºggv√©nyt.*/}
                    {Object.keys(user).map((field) => (   // a field egy string ami lehet a "nev", "tajszam", stb
                      <td key={field} onDoubleClick={() => handleEdit(user, field)}>

                        {/*Ez a r√©sz azt ellen≈ërzi, hogy a cella szerkeszt√©si m√≥dban van-e:
                        Ha igen:
                        Egy <input> mez≈ët jelen√≠t meg a cell√°ban.
                        A be√≠rt √©rt√©k (value) az editingUser[editingField] (a szerkesztett adat).
                        onChange={handleChange} ‚Üí friss√≠ti az √©rt√©ket a g√©pel√©s sor√°n.*/}
                        {editingUser?.d_azon === user.d_azon && editingField === field ? (
                          <input
                          type="text"
                          value={editingUser[editingField] || ""}  // Haszn√°lj condition-t a value friss√≠t√©s√©re
                          onChange={handleChange}
                          onKeyDown={handleKeyDown}
                          autoFocus
                        />                        
                        ) : (
                          // ha nem szerkeszt√ºnk akkor egyszer≈±en a user[field] √©rt√©ket (pl. a n√©v vagy TAJ-sz√°m) jelen√≠ti meg
                          user[field]
                        )}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>


            </Table>



          )}

        </div>
      </article>
    </main>


    <Modal show={showModal} onHide={() => setShowModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Ment√©s folyamatban... üöÄ</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <p>Az adatok ment√©se folyamatban van. K√©rlek, v√°rj egy pillanatot.</p>
        </Modal.Body>
    </Modal>


  </div>
  );
}